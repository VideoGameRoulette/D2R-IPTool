name: "Automated Release"

on:
  push:
    branches:
      - master

jobs:
  publish:
    name: "Publish"
    runs-on: "windows-latest"
    strategy:
      matrix:
        publish-profile-name: [x86, x64]
    env:
      working-directory: .
      project-name: D2R-IPTool
      platform: ${{matrix.publish-profile-name}}
    outputs:
      solution: ${{steps.generated-variables-1.outputs.solution}}
      project: ${{steps.generated-variables-1.outputs.project}}
      publish-directory: ${{steps.generated-variables-1.outputs.publish-directory}}
      zip-filename: ${{steps.generated-variables-2.outputs.zip-filename}}
      version: ${{steps.get_version.outputs.RELEASE_VERSION}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Compiles the program and runs the publish profile
    - name: Compile and run publish profile
      run: |
        dotnet publish ${{steps.generated-variables-1.outputs.solution}} /p:PublishProfile=${{matrix.publish-profile-name}}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Upload publish artifacts
      uses: actions/upload-artifact@v2
      with:
        path: |
          ${{steps.generated-variables-1.outputs.publish-directory}}SRTHost*.exe
          
  release:
    name: "Release"
    runs-on: "windows-latest"
    needs: publish
    env:
      working-directory: .
      is-prerelease: true

    steps:
    # Checkout latest code
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v2

    # Zip the publish artifacts
    - name: Zip the publish artifacts
      run: |
        Add-Type -assembly 'System.IO.Compression'
        Add-Type -assembly 'System.IO.Compression.FileSystem'
        [System.IO.Compression.ZipArchive]$zipFile = [System.IO.Compression.ZipFile]::Open('${{needs.publish.outputs.zip-filename}}', ([System.IO.Compression.ZipArchiveMode]::Create))
        $filesToZip = (Get-ChildItem -Path artifact/ -Filter SRTHost*.exe).fullname
        foreach ($fileToZip in $filesToZip) {
            [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, $fileToZip, (Split-Path $fileToZip -Leaf))
        }
        [System.IO.Compression.ZipFileExtensions]::CreateEntryFromFile($zipFile, 'LICENSE', 'LICENSE')
        $zipFile.Dispose()
    # Pushes the release
    - name: Publish release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: ${{env.is-prerelease}}
        title: 'Automated Build [master] - ${{needs.publish.outputs.version}} Release'
        files: |
          ${{needs.publish.outputs.zip-filename}}
